(function() {var type_impls = {
"sgx_oc":[],
"sgx_tlibc_sys":[],
"sgx_tstd":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#43-980\">source</a><a href=\"#impl-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.floor\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#60-62\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.floor\" class=\"fn\">floor</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the largest integer less than or equal to <code>self</code>.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = <span class=\"number\">3.7_f64</span>;\n<span class=\"kw\">let </span>g = <span class=\"number\">3.0_f64</span>;\n<span class=\"kw\">let </span>h = -<span class=\"number\">3.7_f64</span>;\n\n<span class=\"macro\">assert_eq!</span>(f.floor(), <span class=\"number\">3.0</span>);\n<span class=\"macro\">assert_eq!</span>(g.floor(), <span class=\"number\">3.0</span>);\n<span class=\"macro\">assert_eq!</span>(h.floor(), -<span class=\"number\">4.0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ceil\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#78-80\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.ceil\" class=\"fn\">ceil</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the smallest integer greater than or equal to <code>self</code>.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = <span class=\"number\">3.01_f64</span>;\n<span class=\"kw\">let </span>g = <span class=\"number\">4.0_f64</span>;\n\n<span class=\"macro\">assert_eq!</span>(f.ceil(), <span class=\"number\">4.0</span>);\n<span class=\"macro\">assert_eq!</span>(g.ceil(), <span class=\"number\">4.0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.round\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#103-105\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.round\" class=\"fn\">round</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the nearest integer to <code>self</code>. If a value is half-way between two\nintegers, round away from <code>0.0</code>.</p>\n<h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = <span class=\"number\">3.3_f64</span>;\n<span class=\"kw\">let </span>g = -<span class=\"number\">3.3_f64</span>;\n<span class=\"kw\">let </span>h = -<span class=\"number\">3.7_f64</span>;\n<span class=\"kw\">let </span>i = <span class=\"number\">3.5_f64</span>;\n<span class=\"kw\">let </span>j = <span class=\"number\">4.5_f64</span>;\n\n<span class=\"macro\">assert_eq!</span>(f.round(), <span class=\"number\">3.0</span>);\n<span class=\"macro\">assert_eq!</span>(g.round(), -<span class=\"number\">3.0</span>);\n<span class=\"macro\">assert_eq!</span>(h.round(), -<span class=\"number\">4.0</span>);\n<span class=\"macro\">assert_eq!</span>(i.round(), <span class=\"number\">4.0</span>);\n<span class=\"macro\">assert_eq!</span>(j.round(), <span class=\"number\">5.0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.round_ties_even\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#128-130\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.round_ties_even\" class=\"fn\">round_ties_even</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the nearest integer to a number. Rounds half-way cases to the number\nwith an even least significant digit.</p>\n<h5 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(round_ties_even)]\n\n</span><span class=\"kw\">let </span>f = <span class=\"number\">3.3_f64</span>;\n<span class=\"kw\">let </span>g = -<span class=\"number\">3.3_f64</span>;\n<span class=\"kw\">let </span>h = <span class=\"number\">3.5_f64</span>;\n<span class=\"kw\">let </span>i = <span class=\"number\">4.5_f64</span>;\n\n<span class=\"macro\">assert_eq!</span>(f.round_ties_even(), <span class=\"number\">3.0</span>);\n<span class=\"macro\">assert_eq!</span>(g.round_ties_even(), -<span class=\"number\">3.0</span>);\n<span class=\"macro\">assert_eq!</span>(h.round_ties_even(), <span class=\"number\">4.0</span>);\n<span class=\"macro\">assert_eq!</span>(i.round_ties_even(), <span class=\"number\">4.0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trunc\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#149-151\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.trunc\" class=\"fn\">trunc</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the integer part of <code>self</code>.\nThis means that non-integer numbers are always truncated towards zero.</p>\n<h5 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = <span class=\"number\">3.7_f64</span>;\n<span class=\"kw\">let </span>g = <span class=\"number\">3.0_f64</span>;\n<span class=\"kw\">let </span>h = -<span class=\"number\">3.7_f64</span>;\n\n<span class=\"macro\">assert_eq!</span>(f.trunc(), <span class=\"number\">3.0</span>);\n<span class=\"macro\">assert_eq!</span>(g.trunc(), <span class=\"number\">3.0</span>);\n<span class=\"macro\">assert_eq!</span>(h.trunc(), -<span class=\"number\">3.0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fract\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#169-171\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.fract\" class=\"fn\">fract</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the fractional part of <code>self</code>.</p>\n<h5 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">3.6_f64</span>;\n<span class=\"kw\">let </span>y = -<span class=\"number\">3.6_f64</span>;\n<span class=\"kw\">let </span>abs_difference_x = (x.fract() - <span class=\"number\">0.6</span>).abs();\n<span class=\"kw\">let </span>abs_difference_y = (y.fract() - (-<span class=\"number\">0.6</span>)).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference_x &lt; <span class=\"number\">1e-10</span>);\n<span class=\"macro\">assert!</span>(abs_difference_y &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#192-194\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<h5 id=\"examples-6\"><a href=\"#examples-6\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">3.5_f64</span>;\n<span class=\"kw\">let </span>y = -<span class=\"number\">3.5_f64</span>;\n\n<span class=\"kw\">let </span>abs_difference_x = (x.abs() - x).abs();\n<span class=\"kw\">let </span>abs_difference_y = (y.abs() - (-y)).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference_x &lt; <span class=\"number\">1e-10</span>);\n<span class=\"macro\">assert!</span>(abs_difference_y &lt; <span class=\"number\">1e-10</span>);\n\n<span class=\"macro\">assert!</span>(f64::NAN.abs().is_nan());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signum\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#215-217\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.signum\" class=\"fn\">signum</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns a number that represents the sign of <code>self</code>.</p>\n<ul>\n<li><code>1.0</code> if the number is positive, <code>+0.0</code> or <code>INFINITY</code></li>\n<li><code>-1.0</code> if the number is negative, <code>-0.0</code> or <code>NEG_INFINITY</code></li>\n<li>NaN if the number is NaN</li>\n</ul>\n<h5 id=\"examples-7\"><a href=\"#examples-7\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = <span class=\"number\">3.5_f64</span>;\n\n<span class=\"macro\">assert_eq!</span>(f.signum(), <span class=\"number\">1.0</span>);\n<span class=\"macro\">assert_eq!</span>(f64::NEG_INFINITY.signum(), -<span class=\"number\">1.0</span>);\n\n<span class=\"macro\">assert!</span>(f64::NAN.signum().is_nan());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copysign\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#243-245\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.copysign\" class=\"fn\">copysign</a>(self, sign: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns a number composed of the magnitude of <code>self</code> and the sign of\n<code>sign</code>.</p>\n<p>Equal to <code>self</code> if the sign of <code>self</code> and <code>sign</code> are the same, otherwise\nequal to <code>-self</code>. If <code>self</code> is a NaN, then a NaN with the sign bit of\n<code>sign</code> is returned. Note, however, that conserving the sign bit on NaN\nacross arithmetical operations is not generally guaranteed.\nSee <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f32.html\" title=\"primitive f32\">explanation of NaN as a special value</a> for more info.</p>\n<h5 id=\"examples-8\"><a href=\"#examples-8\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = <span class=\"number\">3.5_f64</span>;\n\n<span class=\"macro\">assert_eq!</span>(f.copysign(<span class=\"number\">0.42</span>), <span class=\"number\">3.5_f64</span>);\n<span class=\"macro\">assert_eq!</span>(f.copysign(-<span class=\"number\">0.42</span>), -<span class=\"number\">3.5_f64</span>);\n<span class=\"macro\">assert_eq!</span>((-f).copysign(<span class=\"number\">0.42</span>), <span class=\"number\">3.5_f64</span>);\n<span class=\"macro\">assert_eq!</span>((-f).copysign(-<span class=\"number\">0.42</span>), -<span class=\"number\">3.5_f64</span>);\n\n<span class=\"macro\">assert!</span>(f64::NAN.copysign(<span class=\"number\">1.0</span>).is_nan());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_add\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#270-272\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.mul_add\" class=\"fn\">mul_add</a>(self, a: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>, b: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Fused multiply-add. Computes <code>(self * a) + b</code> with only one rounding\nerror, yielding a more accurate result than an unfused multiply-add.</p>\n<p>Using <code>mul_add</code> <em>may</em> be more performant than an unfused multiply-add if\nthe target architecture has a dedicated <code>fma</code> CPU instruction. However,\nthis is not always true, and will be heavily dependant on designing\nalgorithms with specific target hardware in mind.</p>\n<h5 id=\"examples-9\"><a href=\"#examples-9\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>m = <span class=\"number\">10.0_f64</span>;\n<span class=\"kw\">let </span>x = <span class=\"number\">4.0_f64</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">60.0_f64</span>;\n\n<span class=\"comment\">// 100.0\n</span><span class=\"kw\">let </span>abs_difference = (m.mul_add(x, b) - ((m * x) + b)).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#294-300\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.div_euclid\" class=\"fn\">div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Calculates Euclidean division, the matching method for <code>rem_euclid</code>.</p>\n<p>This computes the integer <code>n</code> such that\n<code>self = n * rhs + self.rem_euclid(rhs)</code>.\nIn other words, the result is <code>self / rhs</code> rounded to the integer <code>n</code>\nsuch that <code>self &gt;= n * rhs</code>.</p>\n<h5 id=\"examples-10\"><a href=\"#examples-10\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: f64 = <span class=\"number\">7.0</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">4.0</span>;\n<span class=\"macro\">assert_eq!</span>(a.div_euclid(b), <span class=\"number\">1.0</span>); <span class=\"comment\">// 7.0 &gt; 4.0 * 1.0\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(b), -<span class=\"number\">2.0</span>); <span class=\"comment\">// -7.0 &gt;= 4.0 * -2.0\n</span><span class=\"macro\">assert_eq!</span>(a.div_euclid(-b), -<span class=\"number\">1.0</span>); <span class=\"comment\">// 7.0 &gt;= -4.0 * -1.0\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(-b), <span class=\"number\">2.0</span>); <span class=\"comment\">// -7.0 &gt;= -4.0 * 2.0</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#328-331\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.rem_euclid\" class=\"fn\">rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Calculates the least nonnegative remainder of <code>self (mod rhs)</code>.</p>\n<p>In particular, the return value <code>r</code> satisfies <code>0.0 &lt;= r &lt; rhs.abs()</code> in\nmost cases. However, due to a floating point round-off error it can\nresult in <code>r == rhs.abs()</code>, violating the mathematical definition, if\n<code>self</code> is much smaller than <code>rhs.abs()</code> in magnitude and <code>self &lt; 0.0</code>.\nThis result is not an element of the functionโs codomain, but it is the\nclosest floating point number in the real numbers and thus fulfills the\nproperty <code>self == self.div_euclid(rhs) * rhs + self.rem_euclid(rhs)</code>\napproximately.</p>\n<h5 id=\"examples-11\"><a href=\"#examples-11\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: f64 = <span class=\"number\">7.0</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">4.0</span>;\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(b), <span class=\"number\">3.0</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(b), <span class=\"number\">1.0</span>);\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(-b), <span class=\"number\">3.0</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(-b), <span class=\"number\">1.0</span>);\n<span class=\"comment\">// limitation due to round-off error\n</span><span class=\"macro\">assert!</span>((-f64::EPSILON).rem_euclid(<span class=\"number\">3.0</span>) != <span class=\"number\">0.0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.powi\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#350-352\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.powi\" class=\"fn\">powi</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Raises a number to an integer power.</p>\n<p>Using this function is generally faster than using <code>powf</code>.\nIt might have a different sequence of rounding operations than <code>powf</code>,\nso the results are not guaranteed to agree.</p>\n<h5 id=\"examples-12\"><a href=\"#examples-12\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">2.0_f64</span>;\n<span class=\"kw\">let </span>abs_difference = (x.powi(<span class=\"number\">2</span>) - (x * x)).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.powf\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#367-369\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.powf\" class=\"fn\">powf</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Raises a number to a floating point power.</p>\n<h5 id=\"examples-13\"><a href=\"#examples-13\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">2.0_f64</span>;\n<span class=\"kw\">let </span>abs_difference = (x.powf(<span class=\"number\">2.0</span>) - (x * x)).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sqrt\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#391-393\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.sqrt\" class=\"fn\">sqrt</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the square root of a number.</p>\n<p>Returns NaN if <code>self</code> is a negative number other than <code>-0.0</code>.</p>\n<h5 id=\"examples-14\"><a href=\"#examples-14\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>positive = <span class=\"number\">4.0_f64</span>;\n<span class=\"kw\">let </span>negative = -<span class=\"number\">4.0_f64</span>;\n<span class=\"kw\">let </span>negative_zero = -<span class=\"number\">0.0_f64</span>;\n\n<span class=\"kw\">let </span>abs_difference = (positive.sqrt() - <span class=\"number\">2.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);\n<span class=\"macro\">assert!</span>(negative.sqrt().is_nan());\n<span class=\"macro\">assert!</span>(negative_zero.sqrt() == negative_zero);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.exp\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#412-414\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.exp\" class=\"fn\">exp</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>e^(self)</code>, (the exponential function).</p>\n<h5 id=\"examples-15\"><a href=\"#examples-15\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = <span class=\"number\">1.0_f64</span>;\n<span class=\"comment\">// e^1\n</span><span class=\"kw\">let </span>e = one.exp();\n\n<span class=\"comment\">// ln(e) - 1 == 0\n</span><span class=\"kw\">let </span>abs_difference = (e.ln() - <span class=\"number\">1.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.exp2\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#431-433\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.exp2\" class=\"fn\">exp2</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>2^(self)</code>.</p>\n<h5 id=\"examples-16\"><a href=\"#examples-16\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = <span class=\"number\">2.0_f64</span>;\n\n<span class=\"comment\">// 2^2 - 4 == 0\n</span><span class=\"kw\">let </span>abs_difference = (f.exp2() - <span class=\"number\">4.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ln\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#452-454\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.ln\" class=\"fn\">ln</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the natural logarithm of the number.</p>\n<h5 id=\"examples-17\"><a href=\"#examples-17\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = <span class=\"number\">1.0_f64</span>;\n<span class=\"comment\">// e^1\n</span><span class=\"kw\">let </span>e = one.exp();\n\n<span class=\"comment\">// ln(e) - 1 == 0\n</span><span class=\"kw\">let </span>abs_difference = (e.ln() - <span class=\"number\">1.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.log\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#475-477\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.log\" class=\"fn\">log</a>(self, base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base.</p>\n<p>The result might not be correctly rounded owing to implementation details;\n<code>self.log2()</code> can produce more accurate results for base 2, and\n<code>self.log10()</code> can produce more accurate results for base 10.</p>\n<h5 id=\"examples-18\"><a href=\"#examples-18\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>twenty_five = <span class=\"number\">25.0_f64</span>;\n\n<span class=\"comment\">// log5(25) - 2 == 0\n</span><span class=\"kw\">let </span>abs_difference = (twenty_five.log(<span class=\"number\">5.0</span>) - <span class=\"number\">2.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.log2\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#494-496\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.log2\" class=\"fn\">log2</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number.</p>\n<h5 id=\"examples-19\"><a href=\"#examples-19\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>four = <span class=\"number\">4.0_f64</span>;\n\n<span class=\"comment\">// log2(4) - 2 == 0\n</span><span class=\"kw\">let </span>abs_difference = (four.log2() - <span class=\"number\">2.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.log10\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#513-515\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.log10\" class=\"fn\">log10</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number.</p>\n<h5 id=\"examples-20\"><a href=\"#examples-20\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>hundred = <span class=\"number\">100.0_f64</span>;\n\n<span class=\"comment\">// log10(100) - 2 == 0\n</span><span class=\"kw\">let </span>abs_difference = (hundred.log10() - <span class=\"number\">2.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_sub\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#547-549\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.abs_sub\" class=\"fn\">abs_sub</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">๐</span><span>Deprecated since 1.10.0: you probably meant <code>(self - other).abs()</code>: this operation is <code>(self - other).max(0.0)</code> except that <code>abs_sub</code> also propagates NaNs (also known as <code>fdim</code> in C). If you truly need the positive difference, consider using that expression or the C function <code>fdim</code>, depending on how you wish to handle NaN (please consider filing an issue describing your use-case too).</span></div></span></summary><div class=\"docblock\"><p>The positive difference of two numbers.</p>\n<ul>\n<li>If <code>self &lt;= other</code>: <code>0.0</code></li>\n<li>Else: <code>self - other</code></li>\n</ul>\n<h5 id=\"examples-21\"><a href=\"#examples-21\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">3.0_f64</span>;\n<span class=\"kw\">let </span>y = -<span class=\"number\">3.0_f64</span>;\n\n<span class=\"kw\">let </span>abs_difference_x = (x.abs_sub(<span class=\"number\">1.0</span>) - <span class=\"number\">2.0</span>).abs();\n<span class=\"kw\">let </span>abs_difference_y = (y.abs_sub(<span class=\"number\">1.0</span>) - <span class=\"number\">0.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference_x &lt; <span class=\"number\">1e-10</span>);\n<span class=\"macro\">assert!</span>(abs_difference_y &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cbrt\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#566-568\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.cbrt\" class=\"fn\">cbrt</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the cube root of a number.</p>\n<h5 id=\"examples-22\"><a href=\"#examples-22\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">8.0_f64</span>;\n\n<span class=\"comment\">// x^(1/3) - 2 == 0\n</span><span class=\"kw\">let </span>abs_difference = (x.cbrt() - <span class=\"number\">2.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hypot\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#589-591\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.hypot\" class=\"fn\">hypot</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Compute the distance between the origin and a point (<code>x</code>, <code>y</code>) on the\nEuclidean plane. Equivalently, compute the length of the hypotenuse of a\nright-angle triangle with other sides having length <code>x.abs()</code> and\n<code>y.abs()</code>.</p>\n<h5 id=\"examples-23\"><a href=\"#examples-23\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">2.0_f64</span>;\n<span class=\"kw\">let </span>y = <span class=\"number\">3.0_f64</span>;\n\n<span class=\"comment\">// sqrt(x^2 + y^2)\n</span><span class=\"kw\">let </span>abs_difference = (x.hypot(y) - (x.powi(<span class=\"number\">2</span>) + y.powi(<span class=\"number\">2</span>)).sqrt()).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sin\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#607-609\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.sin\" class=\"fn\">sin</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Computes the sine of a number (in radians).</p>\n<h5 id=\"examples-24\"><a href=\"#examples-24\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = std::f64::consts::FRAC_PI_2;\n\n<span class=\"kw\">let </span>abs_difference = (x.sin() - <span class=\"number\">1.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cos\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#625-627\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.cos\" class=\"fn\">cos</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Computes the cosine of a number (in radians).</p>\n<h5 id=\"examples-25\"><a href=\"#examples-25\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">2.0 </span>* std::f64::consts::PI;\n\n<span class=\"kw\">let </span>abs_difference = (x.cos() - <span class=\"number\">1.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tan\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#642-644\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.tan\" class=\"fn\">tan</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Computes the tangent of a number (in radians).</p>\n<h5 id=\"examples-26\"><a href=\"#examples-26\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = std::f64::consts::FRAC_PI_4;\n<span class=\"kw\">let </span>abs_difference = (x.tan() - <span class=\"number\">1.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-14</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.asin\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#663-665\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.asin\" class=\"fn\">asin</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].</p>\n<h5 id=\"examples-27\"><a href=\"#examples-27\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = std::f64::consts::FRAC_PI_2;\n\n<span class=\"comment\">// asin(sin(pi/2))\n</span><span class=\"kw\">let </span>abs_difference = (f.sin().asin() - std::f64::consts::FRAC_PI_2).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.acos\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#684-686\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.acos\" class=\"fn\">acos</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].</p>\n<h5 id=\"examples-28\"><a href=\"#examples-28\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = std::f64::consts::FRAC_PI_4;\n\n<span class=\"comment\">// acos(cos(pi/4))\n</span><span class=\"kw\">let </span>abs_difference = (f.cos().acos() - std::f64::consts::FRAC_PI_4).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.atan\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#704-706\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.atan\" class=\"fn\">atan</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];</p>\n<h5 id=\"examples-29\"><a href=\"#examples-29\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = <span class=\"number\">1.0_f64</span>;\n\n<span class=\"comment\">// atan(tan(1))\n</span><span class=\"kw\">let </span>abs_difference = (f.tan().atan() - <span class=\"number\">1.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.atan2\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#737-739\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.atan2\" class=\"fn\">atan2</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code> (<code>x</code>) in radians.</p>\n<ul>\n<li><code>x = 0</code>, <code>y = 0</code>: <code>0</code></li>\n<li><code>x &gt;= 0</code>: <code>arctan(y/x)</code> -&gt; <code>[-pi/2, pi/2]</code></li>\n<li><code>y &gt;= 0</code>: <code>arctan(y/x) + pi</code> -&gt; <code>(pi/2, pi]</code></li>\n<li><code>y &lt; 0</code>: <code>arctan(y/x) - pi</code> -&gt; <code>(-pi, -pi/2)</code></li>\n</ul>\n<h5 id=\"examples-30\"><a href=\"#examples-30\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Positive angles measured counter-clockwise\n// from positive x axis\n// -pi/4 radians (45 deg clockwise)\n</span><span class=\"kw\">let </span>x1 = <span class=\"number\">3.0_f64</span>;\n<span class=\"kw\">let </span>y1 = -<span class=\"number\">3.0_f64</span>;\n\n<span class=\"comment\">// 3pi/4 radians (135 deg counter-clockwise)\n</span><span class=\"kw\">let </span>x2 = -<span class=\"number\">3.0_f64</span>;\n<span class=\"kw\">let </span>y2 = <span class=\"number\">3.0_f64</span>;\n\n<span class=\"kw\">let </span>abs_difference_1 = (y1.atan2(x1) - (-std::f64::consts::FRAC_PI_4)).abs();\n<span class=\"kw\">let </span>abs_difference_2 = (y2.atan2(x2) - (<span class=\"number\">3.0 </span>* std::f64::consts::FRAC_PI_4)).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference_1 &lt; <span class=\"number\">1e-10</span>);\n<span class=\"macro\">assert!</span>(abs_difference_2 &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sin_cos\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#758-760\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.sin_cos\" class=\"fn\">sin_cos</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>)</h4></section></summary><div class=\"docblock\"><p>Simultaneously computes the sine and cosine of the number, <code>x</code>. Returns\n<code>(sin(x), cos(x))</code>.</p>\n<h5 id=\"examples-31\"><a href=\"#examples-31\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = std::f64::consts::FRAC_PI_4;\n<span class=\"kw\">let </span>f = x.sin_cos();\n\n<span class=\"kw\">let </span>abs_difference_0 = (f.<span class=\"number\">0 </span>- x.sin()).abs();\n<span class=\"kw\">let </span>abs_difference_1 = (f.<span class=\"number\">1 </span>- x.cos()).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference_0 &lt; <span class=\"number\">1e-10</span>);\n<span class=\"macro\">assert!</span>(abs_difference_1 &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.exp_m1\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#779-781\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.exp_m1\" class=\"fn\">exp_m1</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>e^(self) - 1</code> in a way that is accurate even if the\nnumber is close to zero.</p>\n<h5 id=\"examples-32\"><a href=\"#examples-32\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">1e-16_f64</span>;\n\n<span class=\"comment\">// for very small x, e^x is approximately 1 + x + x^2 / 2\n</span><span class=\"kw\">let </span>approx = x + x * x / <span class=\"number\">2.0</span>;\n<span class=\"kw\">let </span>abs_difference = (x.exp_m1() - approx).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ln_1p\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#800-802\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.ln_1p\" class=\"fn\">ln_1p</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nthe operations were performed separately.</p>\n<h5 id=\"examples-33\"><a href=\"#examples-33\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">1e-16_f64</span>;\n\n<span class=\"comment\">// for very small x, ln(1 + x) is approximately x - x^2 / 2\n</span><span class=\"kw\">let </span>approx = x - x * x / <span class=\"number\">2.0</span>;\n<span class=\"kw\">let </span>abs_difference = (x.ln_1p() - approx).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sinh\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#822-824\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.sinh\" class=\"fn\">sinh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Hyperbolic sine function.</p>\n<h5 id=\"examples-34\"><a href=\"#examples-34\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>e = std::f64::consts::E;\n<span class=\"kw\">let </span>x = <span class=\"number\">1.0_f64</span>;\n\n<span class=\"kw\">let </span>f = x.sinh();\n<span class=\"comment\">// Solving sinh() at 1 gives `(e^2-1)/(2e)`\n</span><span class=\"kw\">let </span>g = ((e * e) - <span class=\"number\">1.0</span>) / (<span class=\"number\">2.0 </span>* e);\n<span class=\"kw\">let </span>abs_difference = (f - g).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cosh\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#844-846\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.cosh\" class=\"fn\">cosh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Hyperbolic cosine function.</p>\n<h5 id=\"examples-35\"><a href=\"#examples-35\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>e = std::f64::consts::E;\n<span class=\"kw\">let </span>x = <span class=\"number\">1.0_f64</span>;\n<span class=\"kw\">let </span>f = x.cosh();\n<span class=\"comment\">// Solving cosh() at 1 gives this result\n</span><span class=\"kw\">let </span>g = ((e * e) + <span class=\"number\">1.0</span>) / (<span class=\"number\">2.0 </span>* e);\n<span class=\"kw\">let </span>abs_difference = (f - g).abs();\n\n<span class=\"comment\">// Same result\n</span><span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1.0e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tanh\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#866-868\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.tanh\" class=\"fn\">tanh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Hyperbolic tangent function.</p>\n<h5 id=\"examples-36\"><a href=\"#examples-36\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>e = std::f64::consts::E;\n<span class=\"kw\">let </span>x = <span class=\"number\">1.0_f64</span>;\n\n<span class=\"kw\">let </span>f = x.tanh();\n<span class=\"comment\">// Solving tanh() at 1 gives `(1 - e^(-2))/(1 + e^(-2))`\n</span><span class=\"kw\">let </span>g = (<span class=\"number\">1.0 </span>- e.powi(-<span class=\"number\">2</span>)) / (<span class=\"number\">1.0 </span>+ e.powi(-<span class=\"number\">2</span>));\n<span class=\"kw\">let </span>abs_difference = (f - g).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1.0e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.asinh\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#885-889\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.asinh\" class=\"fn\">asinh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Inverse hyperbolic sine function.</p>\n<h5 id=\"examples-37\"><a href=\"#examples-37\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">1.0_f64</span>;\n<span class=\"kw\">let </span>f = x.sinh().asinh();\n\n<span class=\"kw\">let </span>abs_difference = (f - x).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1.0e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.acosh\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#906-912\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.acosh\" class=\"fn\">acosh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Inverse hyperbolic cosine function.</p>\n<h5 id=\"examples-38\"><a href=\"#examples-38\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">1.0_f64</span>;\n<span class=\"kw\">let </span>f = x.cosh().acosh();\n\n<span class=\"kw\">let </span>abs_difference = (f - x).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1.0e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.atanh\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#929-931\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.atanh\" class=\"fn\">atanh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Inverse hyperbolic tangent function.</p>\n<h5 id=\"examples-39\"><a href=\"#examples-39\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>e = std::f64::consts::E;\n<span class=\"kw\">let </span>f = e.tanh().atanh();\n\n<span class=\"kw\">let </span>abs_difference = (f - e).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1.0e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gamma\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#948-950\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.gamma\" class=\"fn\">gamma</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Gamma function.</p>\n<h5 id=\"examples-40\"><a href=\"#examples-40\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(float_gamma)]\n</span><span class=\"kw\">let </span>x = <span class=\"number\">5.0f64</span>;\n\n<span class=\"kw\">let </span>abs_difference = (x.gamma() - <span class=\"number\">24.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt;= f64::EPSILON);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ln_gamma\" class=\"method\"><a class=\"src rightside\" href=\"src/sgx_tstd/f64.rs.html#969-973\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html#tymethod.ln_gamma\" class=\"fn\">ln_gamma</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.i32.html\">i32</a>)</h4></section></summary><div class=\"docblock\"><p>Natural logarithm of the absolute value of the gamma function</p>\n<p>The integer part of the tuple indicates the sign of the gamma function.</p>\n<h5 id=\"examples-41\"><a href=\"#examples-41\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(float_gamma)]\n</span><span class=\"kw\">let </span>x = <span class=\"number\">2.0f64</span>;\n\n<span class=\"kw\">let </span>abs_difference = (x.ln_gamma().<span class=\"number\">0 </span>- <span class=\"number\">0.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt;= f64::EPSILON);</code></pre></div>\n</div></details></div></details>",0,"sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#503\">source</a></span><a href=\"#impl-Div%3C%26f64%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/ops/trait.Div.html\" title=\"trait sgx_tstd::ops::Div\">Div</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"sgx_tstd/ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"sgx_tstd/ops/trait.Div.html\" title=\"trait sgx_tstd::ops::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"sgx_tstd/ops/trait.Div.html#associatedtype.Output\" title=\"type sgx_tstd::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#503\">source</a><a href=\"#method.div\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"sgx_tstd/ops/trait.Div.html\" title=\"trait sgx_tstd::ops::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"sgx_tstd/ops/trait.Div.html#associatedtype.Output\" title=\"type sgx_tstd::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"sgx_tstd/ops/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<&f64>","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#503\">source</a></span><a href=\"#impl-Div-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/ops/trait.Div.html\" title=\"trait sgx_tstd::ops::Div\">Div</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"sgx_tstd/ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#503\">source</a><a href=\"#method.div\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"sgx_tstd/ops/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/float.rs.html#230\">source</a></span><a href=\"#impl-LowerExp-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/fmt/trait.LowerExp.html\" title=\"trait sgx_tstd::fmt::LowerExp\">LowerExp</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/float.rs.html#230\">source</a><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/fmt/trait.LowerExp.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"sgx_tstd/fmt/struct.Formatter.html\" title=\"struct sgx_tstd::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"sgx_tstd/result/enum.Result.html\" title=\"enum sgx_tstd::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"sgx_tstd/fmt/struct.Error.html\" title=\"struct sgx_tstd::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerExp","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/float.rs.html#230\">source</a></span><a href=\"#impl-Debug-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/fmt/trait.Debug.html\" title=\"trait sgx_tstd::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/float.rs.html#230\">source</a><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"sgx_tstd/fmt/struct.Formatter.html\" title=\"struct sgx_tstd::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"sgx_tstd/result/enum.Result.html\" title=\"enum sgx_tstd::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"sgx_tstd/fmt/struct.Error.html\" title=\"struct sgx_tstd::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"sgx_tstd/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1492\">source</a></span><a href=\"#impl-PartialOrd-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/cmp/trait.PartialOrd.html\" title=\"trait sgx_tstd::cmp::PartialOrd\">PartialOrd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1492\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"enum\" href=\"sgx_tstd/option/enum.Option.html\" title=\"enum sgx_tstd::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"sgx_tstd/cmp/enum.Ordering.html\" title=\"enum sgx_tstd::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"sgx_tstd/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1492\">source</a><a href=\"#method.lt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"sgx_tstd/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1492\">source</a><a href=\"#method.le\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"sgx_tstd/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1492\">source</a><a href=\"#method.ge\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"sgx_tstd/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1492\">source</a><a href=\"#method.gt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"sgx_tstd/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details></div></details>","PartialOrd","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci32%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#158\">source</a></span><a href=\"#impl-From%3Ci32%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/convert/trait.From.html\" title=\"trait sgx_tstd::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#158\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>i32</code> to <code>f64</code> losslessly.</p>\n</div></details></div></details>","From<i32>","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#162\">source</a></span><a href=\"#impl-From%3Cu8%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/convert/trait.From.html\" title=\"trait sgx_tstd::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#162\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u8</code> to <code>f64</code> losslessly.</p>\n</div></details></div></details>","From<u8>","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cf32%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#168\">source</a></span><a href=\"#impl-From%3Cf32%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/convert/trait.From.html\" title=\"trait sgx_tstd::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f32.html\">f32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#168\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f32.html\">f32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>f32</code> to <code>f64</code> losslessly.</p>\n</div></details></div></details>","From<f32>","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cbool%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.68.0\">1.68.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#191\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/convert/trait.From.html\" title=\"trait sgx_tstd::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#205\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>bool</code> to <code>f64</code> losslessly. The resulting value is positive\n<code>0.0</code> for <code>false</code> and <code>1.0</code> for <code>true</code> values.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: f64 = <span class=\"bool-val\">false</span>.into();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"number\">0.0</span>);\n<span class=\"macro\">assert!</span>(x.is_sign_positive());\n\n<span class=\"kw\">let </span>y: f64 = <span class=\"bool-val\">true</span>.into();\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"number\">1.0</span>);</code></pre></div>\n</div></details></div></details>","From<bool>","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#164\">source</a></span><a href=\"#impl-From%3Cu16%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/convert/trait.From.html\" title=\"trait sgx_tstd::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#164\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u16</code> to <code>f64</code> losslessly.</p>\n</div></details></div></details>","From<u16>","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci8%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#155\">source</a></span><a href=\"#impl-From%3Ci8%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/convert/trait.From.html\" title=\"trait sgx_tstd::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#155\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>i8</code> to <code>f64</code> losslessly.</p>\n</div></details></div></details>","From<i8>","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu32%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#165\">source</a></span><a href=\"#impl-From%3Cu32%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/convert/trait.From.html\" title=\"trait sgx_tstd::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#165\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u32</code> to <code>f64</code> losslessly.</p>\n</div></details></div></details>","From<u32>","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci16%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#157\">source</a></span><a href=\"#impl-From%3Ci16%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/convert/trait.From.html\" title=\"trait sgx_tstd::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#157\">source</a><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>i16</code> to <code>f64</code> losslessly.</p>\n</div></details></div></details>","From<i16>","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3C%26f64%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/ops/trait.Mul.html\" title=\"trait sgx_tstd::ops::Mul\">Mul</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"sgx_tstd/ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"sgx_tstd/ops/trait.Mul.html\" title=\"trait sgx_tstd::ops::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"sgx_tstd/ops/trait.Mul.html#associatedtype.Output\" title=\"type sgx_tstd::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"sgx_tstd/ops/trait.Mul.html\" title=\"trait sgx_tstd::ops::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"sgx_tstd/ops/trait.Mul.html#associatedtype.Output\" title=\"type sgx_tstd::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"sgx_tstd/ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&f64>","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/ops/trait.Mul.html\" title=\"trait sgx_tstd::ops::Mul\">Mul</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"sgx_tstd/ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"sgx_tstd/ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/float.rs.html#230\">source</a></span><a href=\"#impl-UpperExp-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/fmt/trait.UpperExp.html\" title=\"trait sgx_tstd::fmt::UpperExp\">UpperExp</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/float.rs.html#230\">source</a><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/fmt/trait.UpperExp.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"sgx_tstd/fmt/struct.Formatter.html\" title=\"struct sgx_tstd::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"sgx_tstd/result/enum.Result.html\" title=\"enum sgx_tstd::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"sgx_tstd/fmt/struct.Error.html\" title=\"struct sgx_tstd::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperExp","sgx_tstd::ffi::c_double"],["<section id=\"impl-Copy-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/marker.rs.html#489-499\">source</a></span><a href=\"#impl-Copy-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/marker/trait.Copy.html\" title=\"trait sgx_tstd::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section>","Copy","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/default.rs.html#177\">source</a></span><a href=\"#impl-Default-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/default/trait.Default.html\" title=\"trait sgx_tstd::default::Default\">Default</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/default.rs.html#177\">source</a><a href=\"#method.default\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>0.0</code></p>\n</div></details></div></details>","Default","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3C%26f64%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/ops/trait.Sub.html\" title=\"trait sgx_tstd::ops::Sub\">Sub</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"sgx_tstd/ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"sgx_tstd/ops/trait.Sub.html\" title=\"trait sgx_tstd::ops::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"sgx_tstd/ops/trait.Sub.html#associatedtype.Output\" title=\"type sgx_tstd::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"sgx_tstd/ops/trait.Sub.html\" title=\"trait sgx_tstd::ops::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"sgx_tstd/ops/trait.Sub.html#associatedtype.Output\" title=\"type sgx_tstd::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"sgx_tstd/ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<&f64>","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/ops/trait.Sub.html\" title=\"trait sgx_tstd::ops::Sub\">Sub</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"sgx_tstd/ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"sgx_tstd/ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3C%26f64%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/ops/trait.Add.html\" title=\"trait sgx_tstd::ops::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"sgx_tstd/ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"sgx_tstd/ops/trait.Add.html\" title=\"trait sgx_tstd::ops::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"sgx_tstd/ops/trait.Add.html#associatedtype.Output\" title=\"type sgx_tstd::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"sgx_tstd/ops/trait.Add.html\" title=\"trait sgx_tstd::ops::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"sgx_tstd/ops/trait.Add.html#associatedtype.Output\" title=\"type sgx_tstd::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"sgx_tstd/ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&f64>","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/ops/trait.Add.html\" title=\"trait sgx_tstd::ops::Add\">Add</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"sgx_tstd/ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"sgx_tstd/ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3C%26f64%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/ops/trait.DivAssign.html\" title=\"trait sgx_tstd::ops::DivAssign\">DivAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/ops/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"sgx_tstd/ops/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign<&f64>","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/ops/trait.DivAssign.html\" title=\"trait sgx_tstd::ops::DivAssign\">DivAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/ops/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"sgx_tstd/ops/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3C%26f64%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/ops/trait.AddAssign.html\" title=\"trait sgx_tstd::ops::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/ops/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"sgx_tstd/ops/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign<&f64>","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/ops/trait.AddAssign.html\" title=\"trait sgx_tstd::ops::AddAssign\">AddAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/ops/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"sgx_tstd/ops/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#150\">source</a></span><a href=\"#impl-Product-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/iter/trait.Product.html\" title=\"trait sgx_tstd::iter::Product\">Product</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#150\">source</a><a href=\"#method.product\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"sgx_tstd/iter/trait.Iterator.html\" title=\"trait sgx_tstd::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#150\">source</a></span><a href=\"#impl-Product%3C%26f64%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"sgx_tstd/iter/trait.Product.html\" title=\"trait sgx_tstd::iter::Product\">Product</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#150\">source</a><a href=\"#method.product\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"sgx_tstd/iter/trait.Iterator.html\" title=\"trait sgx_tstd::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product<&'a f64>","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/num/dec2flt/mod.rs.html#164\">source</a></span><a href=\"#impl-FromStr-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/str/trait.FromStr.html\" title=\"trait sgx_tstd::str::FromStr\">FromStr</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/num/dec2flt/mod.rs.html#164\">source</a><a href=\"#method.from_str\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"sgx_tstd/result/enum.Result.html\" title=\"enum sgx_tstd::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>, <a class=\"struct\" href=\"sgx_tstd/num/struct.ParseFloatError.html\" title=\"struct sgx_tstd::num::ParseFloatError\">ParseFloatError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string in base 10 to a float.\nAccepts an optional decimal exponent.</p>\n<p>This function accepts strings such as</p>\n<ul>\n<li>โ3.14โ</li>\n<li>โ-3.14โ</li>\n<li>โ2.5E10โ, or equivalently, โ2.5e10โ</li>\n<li>โ2.5E-10โ</li>\n<li>โ5.โ</li>\n<li>โ.5โ, or, equivalently, โ0.5โ</li>\n<li>โinfโ, โ-infโ, โ+infinityโ, โNaNโ</li>\n</ul>\n<p>Note that alphabetical characters are not case-sensitive.</p>\n<p>Leading and trailing whitespace represent an error.</p>\n<h5 id=\"grammar\"><a href=\"#grammar\">Grammar</a></h5>\n<p>All strings that adhere to the following <a href=\"https://www.w3.org/TR/REC-xml/#sec-notation\">EBNF</a> grammar when\nlowercased will result in an <a href=\"sgx_tstd/result/enum.Result.html#variant.Ok\" title=\"variant sgx_tstd::result::Result::Ok\"><code>Ok</code></a> being returned:</p>\n<div class=\"example-wrap\"><pre class=\"language-txt\"><code>Float  ::= Sign? ( &#39;inf&#39; | &#39;infinity&#39; | &#39;nan&#39; | Number )\nNumber ::= ( Digit+ |\n             Digit+ &#39;.&#39; Digit* |\n             Digit* &#39;.&#39; Digit+ ) Exp?\nExp    ::= &#39;e&#39; Sign? Digit+\nSign   ::= [+-]\nDigit  ::= [0-9]\n</code></pre></div><h5 id=\"arguments\"><a href=\"#arguments\">Arguments</a></h5>\n<ul>\n<li>src - A string</li>\n</ul>\n<h5 id=\"return-value\"><a href=\"#return-value\">Return value</a></h5>\n<p><code>Err(ParseFloatError)</code> if the string did not represent a valid\nnumber. Otherwise, <code>Ok(n)</code> where <code>n</code> is the closest\nrepresentable floating-point number to the number represented\nby <code>src</code> (following the same rules for rounding as for the\nresults of primitive operations).</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"sgx_tstd/str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"sgx_tstd/num/struct.ParseFloatError.html\" title=\"struct sgx_tstd::num::ParseFloatError\">ParseFloatError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details></div></details>","FromStr","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#619\">source</a></span><a href=\"#impl-Rem%3C%26f64%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/ops/trait.Rem.html\" title=\"trait sgx_tstd::ops::Rem\">Rem</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"sgx_tstd/ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"sgx_tstd/ops/trait.Rem.html\" title=\"trait sgx_tstd::ops::Rem\">Rem</a>&gt;::<a class=\"associatedtype\" href=\"sgx_tstd/ops/trait.Rem.html#associatedtype.Output\" title=\"type sgx_tstd::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#619\">source</a><a href=\"#method.rem\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"sgx_tstd/ops/trait.Rem.html\" title=\"trait sgx_tstd::ops::Rem\">Rem</a>&gt;::<a class=\"associatedtype\" href=\"sgx_tstd/ops/trait.Rem.html#associatedtype.Output\" title=\"type sgx_tstd::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"sgx_tstd/ops/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<&f64>","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#619\">source</a></span><a href=\"#impl-Rem-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/ops/trait.Rem.html\" title=\"trait sgx_tstd::ops::Rem\">Rem</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"docblock\"><p>The remainder from the division of two floats.</p>\n<p>The remainder has the same sign as the dividend and is computed as:\n<code>x - (x / y).trunc() * y</code>.</p>\n<h4 id=\"examples\"><a href=\"#examples\">Examples</a></h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: f32 = <span class=\"number\">50.50</span>;\n<span class=\"kw\">let </span>y: f32 = <span class=\"number\">8.125</span>;\n<span class=\"kw\">let </span>remainder = x - (x / y).trunc() * y;\n\n<span class=\"comment\">// The answer to both operations is 1.75\n</span><span class=\"macro\">assert_eq!</span>(x % y, remainder);</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"sgx_tstd/ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#619\">source</a><a href=\"#method.rem\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"sgx_tstd/ops/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1438-1440\">source</a></span><a href=\"#impl-PartialEq-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/cmp/trait.PartialEq.html\" title=\"trait sgx_tstd::cmp::PartialEq\">PartialEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1438-1440\">source</a><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1438-1440\">source</a><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/ops/trait.RemAssign.html\" title=\"trait sgx_tstd::ops::RemAssign\">RemAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/ops/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"sgx_tstd/ops/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3C%26f64%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/ops/trait.RemAssign.html\" title=\"trait sgx_tstd::ops::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/ops/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"sgx_tstd/ops/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign<&f64>","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3C%26f64%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/ops/trait.SubAssign.html\" title=\"trait sgx_tstd::ops::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/ops/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"sgx_tstd/ops/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign<&f64>","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/ops/trait.SubAssign.html\" title=\"trait sgx_tstd::ops::SubAssign\">SubAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/ops/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"sgx_tstd/ops/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#229-234\">source</a></span><a href=\"#impl-Clone-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/clone/trait.Clone.html\" title=\"trait sgx_tstd::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#229-234\">source</a><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"sgx_tstd/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"sgx_tstd/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","sgx_tstd::ffi::c_double"],["<section id=\"impl-FloatToInt%3Cu32%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Cu32%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/convert/trait.FloatToInt.html\" title=\"trait sgx_tstd::convert::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section>","FloatToInt<u32>","sgx_tstd::ffi::c_double"],["<section id=\"impl-FloatToInt%3Cu64%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Cu64%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/convert/trait.FloatToInt.html\" title=\"trait sgx_tstd::convert::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section>","FloatToInt<u64>","sgx_tstd::ffi::c_double"],["<section id=\"impl-FloatToInt%3Ci64%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Ci64%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/convert/trait.FloatToInt.html\" title=\"trait sgx_tstd::convert::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section>","FloatToInt<i64>","sgx_tstd::ffi::c_double"],["<section id=\"impl-FloatToInt%3Cu16%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Cu16%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/convert/trait.FloatToInt.html\" title=\"trait sgx_tstd::convert::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section>","FloatToInt<u16>","sgx_tstd::ffi::c_double"],["<section id=\"impl-FloatToInt%3Cu128%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Cu128%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/convert/trait.FloatToInt.html\" title=\"trait sgx_tstd::convert::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section>","FloatToInt<u128>","sgx_tstd::ffi::c_double"],["<section id=\"impl-FloatToInt%3Cisize%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Cisize%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/convert/trait.FloatToInt.html\" title=\"trait sgx_tstd::convert::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section>","FloatToInt<isize>","sgx_tstd::ffi::c_double"],["<section id=\"impl-FloatToInt%3Ci16%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Ci16%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/convert/trait.FloatToInt.html\" title=\"trait sgx_tstd::convert::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section>","FloatToInt<i16>","sgx_tstd::ffi::c_double"],["<section id=\"impl-FloatToInt%3Cu8%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Cu8%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/convert/trait.FloatToInt.html\" title=\"trait sgx_tstd::convert::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section>","FloatToInt<u8>","sgx_tstd::ffi::c_double"],["<section id=\"impl-FloatToInt%3Ci8%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Ci8%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/convert/trait.FloatToInt.html\" title=\"trait sgx_tstd::convert::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section>","FloatToInt<i8>","sgx_tstd::ffi::c_double"],["<section id=\"impl-FloatToInt%3Ci32%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Ci32%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/convert/trait.FloatToInt.html\" title=\"trait sgx_tstd::convert::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section>","FloatToInt<i32>","sgx_tstd::ffi::c_double"],["<section id=\"impl-FloatToInt%3Cusize%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Cusize%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/convert/trait.FloatToInt.html\" title=\"trait sgx_tstd::convert::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section>","FloatToInt<usize>","sgx_tstd::ffi::c_double"],["<section id=\"impl-FloatToInt%3Ci128%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Ci128%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/convert/trait.FloatToInt.html\" title=\"trait sgx_tstd::convert::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section>","FloatToInt<i128>","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/float.rs.html#230\">source</a></span><a href=\"#impl-Display-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/fmt/trait.Display.html\" title=\"trait sgx_tstd::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/float.rs.html#230\">source</a><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"sgx_tstd/fmt/struct.Formatter.html\" title=\"struct sgx_tstd::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"sgx_tstd/result/enum.Result.html\" title=\"enum sgx_tstd::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"sgx_tstd/fmt/struct.Error.html\" title=\"struct sgx_tstd::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"sgx_tstd/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3C%26f64%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/ops/trait.MulAssign.html\" title=\"trait sgx_tstd::ops::MulAssign\">MulAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/ops/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"sgx_tstd/ops/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign<&f64>","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/ops/trait.MulAssign.html\" title=\"trait sgx_tstd::ops::MulAssign\">MulAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/ops/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"sgx_tstd/ops/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#150\">source</a></span><a href=\"#impl-Sum%3C%26f64%3E-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"sgx_tstd/iter/trait.Sum.html\" title=\"trait sgx_tstd::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#150\">source</a><a href=\"#method.sum\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"sgx_tstd/iter/trait.Iterator.html\" title=\"trait sgx_tstd::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nโsumming upโ the items.</div></details></div></details>","Sum<&'a f64>","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#150\">source</a></span><a href=\"#impl-Sum-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/iter/trait.Sum.html\" title=\"trait sgx_tstd::iter::Sum\">Sum</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#150\">source</a><a href=\"#method.sum\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"sgx_tstd/iter/trait.Iterator.html\" title=\"trait sgx_tstd::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nโsumming upโ the items.</div></details></div></details>","Sum","sgx_tstd::ffi::c_double"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#694\">source</a></span><a href=\"#impl-Neg-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/ops/trait.Neg.html\" title=\"trait sgx_tstd::ops::Neg\">Neg</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"sgx_tstd/ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ops/arith.rs.html#694\">source</a><a href=\"#method.neg\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"sgx_tstd/ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details>","Neg","sgx_tstd::ffi::c_double"]],
"sgx_types":[["<section id=\"impl-ContiguousMemory-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/sgx_types/marker.rs.html#81\">source</a><a href=\"#impl-ContiguousMemory-for-f64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_types/marker/trait.ContiguousMemory.html\" title=\"trait sgx_types::marker::ContiguousMemory\">ContiguousMemory</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.f64.html\">f64</a></h3></section>","ContiguousMemory","sgx_types::types::raw::c_double"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()