(function() {var type_impls = {
"sgx_tstd":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-c_void\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/ffi/mod.rs.html#227\">source</a></span><a href=\"#impl-Debug-for-c_void\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sgx_tstd/fmt/trait.Debug.html\" title=\"trait sgx_tstd::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"sgx_tstd/ffi/enum.c_void.html\" title=\"enum sgx_tstd::ffi::c_void\">c_void</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/ffi/mod.rs.html#228\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"sgx_tstd/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"sgx_tstd/fmt/struct.Formatter.html\" title=\"struct sgx_tstd::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"sgx_tstd/result/enum.Result.html\" title=\"enum sgx_tstd::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"sgx_tstd/fmt/struct.Error.html\" title=\"struct sgx_tstd::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"sgx_tstd/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","sgx_tstd::os::raw::c_void"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()