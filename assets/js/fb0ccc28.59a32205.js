"use strict";(self.webpackChunkapache_teaclave_website=self.webpackChunkapache_teaclave_website||[]).push([[8444],{1009:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>d});const c=JSON.parse('{"id":"teaclave-faas-legacy/rpc/README","title":"RPC","description":"This directory contains TLS configuration over an attested TLS connection,","source":"@site/docs/teaclave-faas-legacy/rpc/README.md","sourceDirName":"teaclave-faas-legacy/rpc","slug":"/docs/codebase/rpc","permalink":"/docs/codebase/rpc","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"permalink":"/docs/codebase/rpc","slug":"/docs/codebase/rpc"},"sidebar":"teaclave-faas-legacy_sidebar","previous":{"title":"Logger","permalink":"/docs/codebase/logger"},"next":{"title":"Teaclave Services","permalink":"/docs/codebase/services"}}');var s=t(4848),a=t(8453);const r={permalink:"/docs/codebase/rpc",slug:"/docs/codebase/rpc"},o="RPC",i={},d=[{value:"Channel and Client",id:"channel-and-client",level:2},{value:"Server and Service",id:"server-and-service",level:2},{value:"Interceptor",id:"interceptor",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"rpc",children:"RPC"})}),"\n",(0,s.jsx)(n.p,{children:"This directory contains TLS configuration over an attested TLS connection,\nproviding trusted channels to send and handle requests."}),"\n",(0,s.jsxs)(n.p,{children:["Re-export ",(0,s.jsx)(n.a,{href:"https://github.com/hyperium/tonic",children:"Tonic"})," to support the general\ngRPC framework. ",(0,s.jsx)(n.code,{children:"Tonic"})," is a gRPC over HTTP/2 implementation focused on high\nperformance, interoperability, and flexibility."]}),"\n",(0,s.jsx)(n.h2,{id:"channel-and-client",children:"Channel and Client"}),"\n",(0,s.jsxs)(n.p,{children:["A channel in gRPC represents a connection to the target service. Clients can\nuse the channel to send requests. When constructing a client, you can use the\n",(0,s.jsx)(n.code,{children:"SgxTrustedTlsClientConfig"})," to set up TLS and attestation configurations so\nthat we can establish and attest to a remote connection. For example, to\nconnect the management service, you need to establish a trusted channel with\nthe service first. Then, create a client for the management service with the\nchannel. At last, you can use this client to send requests like ",(0,s.jsx)(n.code,{children:"InvokeTask"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"server-and-service",children:"Server and Service"}),"\n",(0,s.jsxs)(n.p,{children:["A server is an entity that listens to a network address, processes incoming\nmessages, and forwards requests to certain services. Similar to the client, you\ncan use ",(0,s.jsx)(n.code,{children:"SgxTrustedTlsServerConfig"})," to set up TLS and attestation\nconfigurations for the channel with clients."]}),"\n",(0,s.jsx)(n.h2,{id:"interceptor",children:"Interceptor"}),"\n",(0,s.jsxs)(n.p,{children:["In Teaclave, we implement ",(0,s.jsx)(n.code,{children:"CredentialService"})," based on the ",(0,s.jsx)(n.code,{children:"Interceptor"})," trait\nto add a credential to the MetadataMap of each request before it is sent, so\nservers can check the authentication credential of each request."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var c=t(6540);const s={},a=c.createContext(s);function r(e){const n=c.useContext(a);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),c.createElement(a.Provider,{value:n},e.children)}}}]);